package com.project.gestion.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.project.gestion.Modeles.User;
import com.project.gestion.Services.UserService;
@RestController
@CrossOrigin(origins = "http://localhost:4200/")
public class UserController {
	
	
	
	    @Autowired
	    private UserService userService;
	    
	    @PostMapping("/addUser")
	    public User createUser(@RequestBody User user) {
	        return userService.createUser(user);
	    }
	    
	    @GetMapping("/userList")
	    public List<User> getAllUsers() {
	        return userService.getAllUsers();
	    }
	    
	    @GetMapping("/userById/{id}")
	    public ResponseEntity<User> getUserById(@PathVariable(value = "id") int id) {
	        Optional<User> user = userService.getUserById(id);
	        if (user.isPresent()) {
	            return new ResponseEntity<>(user.get(), HttpStatus.OK);
	        } else {
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	    }
	    
	    @PutMapping("/updateUser/{id}")
	    public ResponseEntity<User> updateUser(@PathVariable(value = "id") int id, @RequestBody User user) {
	        Optional<User> existingUser = userService.getUserById(id);
	        if (existingUser.isPresent()) {
	            User updatedUser = existingUser.get();
	            updatedUser.setNom(user.getNom());
	            updatedUser.setPrenom(user.getPrenom());
	            updatedUser.setEmail(user.getEmail());
	            updatedUser.setLogin(user.getLogin());
	            updatedUser.setPassword(user.getPassword());
	            
	            return new ResponseEntity<>(userService.updateUser(updatedUser), HttpStatus.OK);
	        } else {
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	    }
	    
	    @DeleteMapping("/deleteUser/{id}")
	    public ResponseEntity<Object> deleteUserById(@PathVariable(value = "id") int id) {
	        Optional<User> existingUser = userService.getUserById(id);
	        if (existingUser.isPresent()) {
	            userService.deleteUserById(id);
	           return new ResponseEntity<>("user deleted succefully", HttpStatus.OK);
	        } else {
	            return new ResponseEntity<>("user was not found", HttpStatus.NOT_FOUND);
	        }
	    }
	}


